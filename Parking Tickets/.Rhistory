}
Jan14<-readIn("http://opendata.dc.gov/datasets/93c1160a13cd49e0a411b3f8e6c3be66_0.geojson")
Feb14<-readIn("http://opendata.dc.gov/datasets/7877594f7e7a4affbd9372f65b935660_1.geojson")
March14<-readIn("http://opendata.dc.gov/datasets/863a00cfb1384e4288f3f6a53b63c5f1_2.geojson")
April14<-readIn("http://opendata.dc.gov/datasets/f01f547123844b97930de0127555ba64_3.geojson")
May14<-readIn("http://opendata.dc.gov/datasets/25d65f5cb95e492ea718e1764cf5c9a2_4.geojson")
June14<-readIn("http://opendata.dc.gov/datasets/39a65bd2f4ae43ce9dd9da7c209dbf29_5.geojson")
July14<-readIn("http://opendata.dc.gov/datasets/3f557f661e444c29b217eb63c2324d34_6.geojson")
Aug14<-readIn("http://opendata.dc.gov/datasets/dda2ff2bbcdb40a7a2044010f73f962b_7.geojson")
Sept14<-readIn("http://opendata.dc.gov/datasets/d60447c91b4649b892fc56c4b9d9ed96_8.geojson")
Oct14<-readIn("http://opendata.dc.gov/datasets/77e0b89b413d47dbab97927d5f4dcbe1_9.geojson")
Nov14<-readIn("http://opendata.dc.gov/datasets/da64c15a136b4d69ad5a5e3b7b3a8f48_10.geojson")
Dec14<-readIn("http://opendata.dc.gov/datasets/b00605a8e3e54d2ca75c525ba42966ea_11.geojson")
readIn<-function(url) {
dataIn<-geojson_read(url,method = "local",parse = TRUE)
df <- data.frame(matrix(unlist(dataIn$features$properties),nrow=length(dataIn$features$properties[[1]])))
colnames(df)<-names(dataIn$features$properties)
dfLoc<-data.frame(t(matrix(unlist(dataIn$features$geometry$coordinates),
nrow=length(unlist(dataIn$features$geometry$coordinates[1])))))
colnames(dfLoc)<-c("longitude","latitude")
dfAll<-cbind(df,dfLoc)
}
Jan14<-readIn("http://opendata.dc.gov/datasets/93c1160a13cd49e0a411b3f8e6c3be66_0.geojson")
Feb14<-readIn("http://opendata.dc.gov/datasets/7877594f7e7a4affbd9372f65b935660_1.geojson")
March14<-readIn("http://opendata.dc.gov/datasets/863a00cfb1384e4288f3f6a53b63c5f1_2.geojson")
April14<-readIn("http://opendata.dc.gov/datasets/f01f547123844b97930de0127555ba64_3.geojson")
May14<-readIn("http://opendata.dc.gov/datasets/25d65f5cb95e492ea718e1764cf5c9a2_4.geojson")
June14<-readIn("http://opendata.dc.gov/datasets/39a65bd2f4ae43ce9dd9da7c209dbf29_5.geojson")
July14<-readIn("http://opendata.dc.gov/datasets/3f557f661e444c29b217eb63c2324d34_6.geojson")
Aug14<-readIn("http://opendata.dc.gov/datasets/dda2ff2bbcdb40a7a2044010f73f962b_7.geojson")
Sept14<-readIn("http://opendata.dc.gov/datasets/d60447c91b4649b892fc56c4b9d9ed96_8.geojson")
April14<-readIn("http://opendata.dc.gov/datasets/f01f547123844b97930de0127555ba64_3.geojson")
April14<-readIn("http://opendata.dc.gov/datasets/f01f547123844b97930de0127555ba64_3.geojson")
May14<-readIn("http://opendata.dc.gov/datasets/25d65f5cb95e492ea718e1764cf5c9a2_4.geojson")
June14<-readIn("http://opendata.dc.gov/datasets/39a65bd2f4ae43ce9dd9da7c209dbf29_5.geojson")
July14<-readIn("http://opendata.dc.gov/datasets/3f557f661e444c29b217eb63c2324d34_6.geojson")
Aug14<-readIn("http://opendata.dc.gov/datasets/dda2ff2bbcdb40a7a2044010f73f962b_7.geojson")
Sept14<-readIn("http://opendata.dc.gov/datasets/d60447c91b4649b892fc56c4b9d9ed96_8.geojson")
Oct14<-readIn("http://opendata.dc.gov/datasets/77e0b89b413d47dbab97927d5f4dcbe1_9.geojson")
Oct14<-readIn("http://opendata.dc.gov/datasets/77e0b89b413d47dbab97927d5f4dcbe1_9.geojson")
Nov14<-readIn("http://opendata.dc.gov/datasets/da64c15a136b4d69ad5a5e3b7b3a8f48_10.geojson")
Nov14<-readIn("http://opendata.dc.gov/datasets/da64c15a136b4d69ad5a5e3b7b3a8f48_10.geojson")
Dec14<-readIn("http://opendata.dc.gov/datasets/b00605a8e3e54d2ca75c525ba42966ea_11.geojson")
Dec14<-readIn("http://opendata.dc.gov/datasets/b00605a8e3e54d2ca75c525ba42966ea_11.geojson")
Park14<-rbind(Jan14,Feb14,March14,April14,May14,June14,July14,Aug14,Sept14,Oct14,Nov14,Dec14)
write.csv(park14,"/Users/katerabinowitz/Documents/DataLensDC Org/Park14.csv")
write.csv(Park14,"/Users/katerabinowitz/Documents/DataLensDC Org/Park14.csv")
colnames(Park14)
table(Park14$MONTH_OF_YEAR)
test<-park14[!duplicated(park14$OBJECTID),]
test<-Park14[!duplicated(Park14$OBJECTID),]
rm(Jan14,Feb14,March14,April14,May14,June14,July14,Aug14,Sept14,Oct14,Nov14,Dec14,
Jan15, Feb15, March15, April15, May15,June15, July15, Aug15, Sept15,Oct15,Nov15,Dec15)
Jan15, Feb15, March15, April15, May15,June15, July15, Aug15, Sept15,Oct15,Nov15,Dec15,test)
rm(test)
fines<-read.csv("/Users/katerabinowitz/Documents/DataLensDC Org/parkMoveFines.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
View(fines)
fines<-read.csv("/Users/katerabinowitz/Documents/DataLensDC Org/parkMoveFines.csv",
stringsAsFactors=FALSE, strip.white=TRUE)[c(2:4)]
colnames(park)
colnames(fines)[c(1)]<-"VIOLATION_CODE"
View(fines)
tickets15<-join(fines,park,by="VIOLATION_CODE")
tickets15<-join(x=fines,y=park,by="VIOLATION_CODE",all.y=TRUE)
tickets15<-merge(x=fines,y=park,by="VIOLATION_CODE",all.y=TRUE)
View(tickets15)
check<-subset(tickets15,tickets15$desc!=tickets15$VIOLATION_DESCRIPTION)
View(check)
matchcheck<-function(x) {
x<-gsub("[[:space:]]","",x)
x<-gsub("[[:punct:]]","",x)
}
tickets15$descM<-matchcheck(tickets15$desc)
tickets15$vioM<-matchcheck(tickets15$VIOLATION_DESCRIPTION)
check<-subset(tickets15,tickets15$descM!=tickets15$vioM)
View(tickets15)
View(park)
tickets15<-tickets15[-c(4:5,24:25)]
View(tickets15)
tickets15$fines<-as.numeric(gsub("$","",tickets15$fines))
colnames(tickets15)
tickets15$fine<-as.numeric(gsub("$","",tickets15$fine))
View(tickets15)
tickets15<-merge(x=fines,y=park,by="VIOLATION_CODE",all.y=TRUE)
tickets15$descM<-matchcheck(tickets15$desc)
tickets15$vioM<-matchcheck(tickets15$VIOLATION_DESCRIPTION)
tickets15<-tickets15[-c(4:5,24:25)]
tickets15$fineN<-gsub("$","",tickets15$fine)
str(tickets15)
tickets15$fineN<-gsub("\\$","",tickets15$fine)
str(tickets15)
tickets15$fineN<-as.numeric(gsub("\\$","",tickets15$fine))
str(tickets15)
write.csv(tickets15,"/Users/katerabinowitz/Documents/DataLensDC Org/Tickets15.csv")
Jan13<-readIn("http://opendata.dc.gov/datasets/8e065ed29a2d43c08802385f3c9a6df4_0.geojson")
Jan13<-readIn("http://opendata.dc.gov/datasets/8e065ed29a2d43c08802385f3c9a6df4_0.geojson")
Jan13<-readIn("http://opendata.dc.gov/datasets/8e065ed29a2d43c08802385f3c9a6df4_0.geojson")
Jan13<-readIn("http://opendata.dc.gov/datasets/8e065ed29a2d43c08802385f3c9a6df4_0.geojson")
Feb13<-readIn("http://opendata.dc.gov/datasets/e541d743615d4027bf3ec00d67b7adbf_1.geojson")
March13<-readIn("http://opendata.dc.gov/datasets/08283fed77f743bab072b373eb7bd96f_2.geojson")
April13<-readIn("http://opendata.dc.gov/datasets/7906787f79ef47d6b1bc80a4d19ea567_3.geojson")
May13<-readIn("http://opendata.dc.gov/datasets/71a93c37f6c547e3b8d69cebc008493f_4.geojson")
Jan13<-readIn("http://opendata.dc.gov/datasets/8e065ed29a2d43c08802385f3c9a6df4_0.geojson")
March13<-readIn("http://opendata.dc.gov/datasets/08283fed77f743bab072b373eb7bd96f_2.geojson")
June13<-readIn("http://opendata.dc.gov/datasets/ea6f36d302134fc899a593463fb43a83_5.geojson")
July13<-readIn("http://opendata.dc.gov/datasets/0814aef502aa49d783b5086565740524_6.geojson")
Aug13<-readIn("http://opendata.dc.gov/datasets/0b921d3eaa4b410f8d34d0677d3f7cb5_7.geojson")
Sept13<-readIn("http://opendata.dc.gov/datasets/e1261d1070e44f099e05b167866d1bab_8.geojson")
Oct13<-readIn("http://opendata.dc.gov/datasets/8f453e65e7fd445fa3bcdf8f2415241a_9.geojson")
Nov13<-readIn("http://opendata.dc.gov/datasets/f8d4f9f3956b4177948131d4f3e683d2_10.geojson")
Dec13<-readIn("http://opendata.dc.gov/datasets/5d582d5304424c9b823985c294faba66_11.geojson")
Park13<-rbind(Jan13,Feb13,March13,April13,May13,June13,July13,Aug13,Sept13,Oct13,Nov13,Dec13)
write.csv(Park13,"/Users/katerabinowitz/Documents/DataLensDC Org/Park13.csv")
rm(Jan13,Feb13,March13,April13,May13,June13,July13,Aug13,Sept13,Oct13,Nov13,Dec13,
Jan14,Feb14,March14,April14,May14,June14,July14,Aug14,Sept14,Oct14,Nov14,Dec14,
Jan15, Feb15, March15, April15, May15,June15, July15, Aug15, Sept15,Oct15,Nov15,Dec15)
Parking<-rbind(Park13,Park14,park)
colnames(park)
colnames(Park13)
park<-park[-c(1:2)]
Parking<-rbind(Park13,Park14,park)
str(park)
str(Park13)
str(park)
cols = c(8:12,17);
park[,cols] = apply(park[,cols], 2, function(x) as.character(x))
str(park)
str(Park13)
cols = c(1:17)
Park13[,cols] = apply(Park13[,cols], 2, function(x) as.character(x));
Park14[,cols] = apply(Park14[,cols], 2, function(x) as.character(x));
Parking<-rbind(Park13,Park14,Park15)
Parking<-rbind(Park13,Park14,park)
tickets<-merge(x=fines,y=Parking,by="VIOLATION_CODE",all.y=TRUE)
tickets$descM<-matchcheck(tickets15$desc)
tickets$descM<-matchcheck(tickets$desc)
tickets$vioM<-matchcheck(tickets$VIOLATION_DESCRIPTION)
check<-subset(tickets,tickets$descM!=tickets15$vioM)
check<-subset(tickets,tickets$descM!=tickets15$vioM)
colnames(tickets)
tickets<-tickets[-c(22:23)]
tickets$fineN<-as.numeric(gsub("\\$","",tickets$fine))
str(tickets)
tickets$year<-substr(tickets$TICKET_ISSUE_DATE,1,4)
table(tickets$year)
countByState<-monthlySum<-ddply(Speed, c("Year","RP_PLATE_STYLE"), nrow)
countByState<-ddply(tickets, c("Year","RP_PLATE_STYLE"), nrow)
countByState<-ddply(tickets, c("year","RP_PLATE_STYLE"), nrow)
countByState<-ddply(tickets, c("year","RP_PLATE_STATE"), nrow)
View(countByState)
state.abb
countByState<-subset(countByState,countByState$RP_PLATE_STATE %in% state.abb | countByState$RP_PLATE_STATE=="DC")
View(countByState)
fineByState<-aggregate(tickets$fineN, by=list(Category=tickets$year,tickets$RP_PLATE_STATE), FUN=sum)
fineByState<-subset(fineByState,fineByState$RP_PLATE_STATE %in% state.abb | fineByState$RP_PLATE_STATE=="DC")
fineByState<-aggregate(tickets$fineN, by=list(Category=tickets$year,tickets$RP_PLATE_STATE), FUN=sum)
View(fineByState)
fineByState<-aggregate(tickets$fineN, by=list(Category=tickets$year,tickets$RP_PLATE_STATE), FUN=sum,na.rm=TRUE)
View(fineByState)
fineByState<-subset(fineByState,fineByState$Group.2 %in% state.abb | fineByState$Group.2=="DC")
colnames(countByState)<-c("Year","State","Tickets")
colnames(fineByState)<-c("Year","State","Fines")
ticketsByState<-merge(countByState,fineByState,by=list("Year","State"))
ticketsByState<-merge(countByState,fineByState,by=c("Year","State"))
View(ticketsByState)
write.csv(ticketsByState,"/Users/katerabinowitz/Documents/DataLensDC Org/parkingTicketsSummary.csv")
carCounts<-read.csv("/Users/katerabinowitz/Documents/DataLensDC Org/totalVehicleReg14.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
View(carCounts)
carCounts<-read.csv("/Users/katerabinowitz/Documents/DataLensDC Org/totalVehicleReg14.csv",
stringsAsFactors=FALSE, strip.white=TRUE,header=FALSE)
View(carCounts)
colnames(carCounts)<-c("State","Vehicles")
carCounts<-subset(carCounts,carCounts$State!="")
View(carCounts)
state<-cbind(state.name,state.abb)
state<-as.data.frame(cbind(state.name,state.abb))
View(state)
DC<-c("District of Columbia","DC")
state<-rbind(state,DC)
View(state)
DC
DC<-as.data.frame(c("District of Columbia","DC"))
View(DC)
DC<-c("District of Columbia","DC")
DC
DC<-data.frame(t(unlist(c("District of Columbia","DC"))))
View(DC)
state<-rbind(state,DC)
View(state)
colnames(DC)<-c("state.name","state.abb")
state<-rbind(state,DC)
View(state)
state<-as.data.frame(cbind(state.name,state.abb))
DC<-data.frame(t(unlist(c("District of Columbia","DC"))))
colnames(DC)<-c("state.name","state.abb")
state<-rbind(state,DC)
state<-state[order(state$state.name),]
CarCountSt<-cbind(carCounts,state)
View(CarCountSt)
state<-as.data.frame(cbind(state.name,state.abb))
DC<-data.frame(t(unlist(c("District of Columbia","DC"))))
colnames(DC)<-c("state.name","state.abb")
state<-rbind(state,DC)
state<-state[order(state$state.name),]
View(state)
state$state.name
state$state.name<-as.character(state$state.name)
state<-state[order(state$state.name),]
View(state)
CarCountSt<-cbind(carCounts,state)
View(CarCountSt)
CarCountSt<-cbind(carCounts,state)[c(2,4)]
CarCountSt$Vehicles<-as.numeric(gsub(",","",CarCountSt$Vehicles))
View(CarCountSt)
ticketsByState<-merge(ticketsByState,CarCountSt,by="State")
View(CarCountSt)
colnames(CarCountSt)[c(2)]<-"State"
ticketsByState<-merge(ticketsByState,CarCountSt,by="State")
CarCountSt<-cbind(carCounts,state)
View(CarCountSt)
CarCountSt<-cbind(carCounts,state)[c(2:4)]
CarCountSt$Vehicles<-as.numeric(gsub(",","",CarCountSt$Vehicles))
View(CarCountSt)
colnames(CarCountSt)[c3)]<-"State"
colnames(CarCountSt)[c(3)]<-"State"
ticketsByState<-merge(ticketsByState,CarCountSt,by="State")
View(ticketsByState)
View(ticketsByState)
ticketsByState<-ticketsByState[-c(5:7)]
ticketsByState<-merge(ticketsByState,CarCountSt,by="State")
write.csv(ticketsByState,"/Users/katerabinowitz/Documents/DataLensDC Org/parkingTicketsSummary.csv")
data<-read.csv("/Users/katerabinowitz/Documents/DataLensDC Org/parkingTicketsSummary.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
View(data)
Graph12<-subset(data,data$State=="DC|VA|MD")
Graph12<-subset(data,data$State=="DC" | data$State=="VA" | data$State=="MD")
View(Graph12)
View(Graph12)
View(Graph12)
Graph12$state.name<-ifelse(Graph12$state.name=="District of Columbia","DC",Graph12$state.name)
View(Graph12)
View(data)
colnames(data)
variables <- c(Tickets,Fines)
variables <- c("Tickets","Fines")
data<-data[, lapply(.SD, function(x) list(mean(x)), .SDcols=variables, by=State]
data<-lapply(.SD, function(x) list(mean(x)), .SDcols=variables, by=State)
library(data.table)
data<-lapply(.SD, function(x) list(mean(x)), .SDcols=variables, by=State)
variables <- colnames(data)[c(4,5)]
variables <- colnames(data)[c(4,5)]
data<-lapply(.SD, function(x) list(mean(x)), .SDcols=variables, by=State)
map<- data[,lapply(list(data[3:4],mean),by = State]
map<- data[,lapply(list(data[3:4],mean)),by = State]
map<- data[,lapply(list(data[3:4]),mean),by = State]
colnames(data)
data<-read.csv("/Users/katerabinowitz/Documents/DataLensDC Org/parkingTicketsSummary.csv",
stringsAsFactors=FALSE, strip.white=TRUE)
map<- data[,lapply(list(data[3:4]),mean),by = State]
map<- data[,lapply(list(data[3:4]),mean),by = State]
data[3:4]
colnames(data)
map<- data[,lapply(list(data[4:5]),mean),by = State]
map<- data[,lapply(list(data[2,4:5]),mean),by = State]
map<- data[,lapply(list(data[4:5]),mean,by=State)]
map<-data[,lapply(list(Tickets,Fines),mean),by=State]
map<-data[,lapply(list(Tickets,Fines),mean)]
map<- data[,lapply(list(data[4:5]),mean)]
View(data)
setwd("/Users/katerabinowitz/Documents/DataLensDC/DC-Transportation/Parking Tickets")
library(geojsonio)
library(data.table)
library(plyr)
library (dplyr)
library(rgdal)
ticketsByState<-read.csv("ticketsByState.csv")
setwd("/Users/katerabinowitz/Documents/DataLensDC/DC-Transportation/Parking Tickets")
ticketsByState<-read.csv("ticketsByState.csv")
ticketsByState<-read.csv("parkingTicketsSummary.csv")
Graph12<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")
Graph12$state.name<-ifelse(Graph12$state.name=="District of Columbia","DC",Graph12$state.name)
View(Graph12)
View(ticketsByState)
Graph12<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")
View(Graph12)
View(Graph12)
Graph12<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3,4,7)]
View(Graph12)
Graph12$state.name<-ifelse(Graph12$state.name=="District of Columbia","DC",Graph12$state.name)
View(Graph12)
Graph12<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3,4,7)]
View(Graph12)
test<-t(Graph12)
View(test)
Graph12a <- cast(Graph12, Year~State, mean)
library(reshape)
Graph12a <- cast(Graph12, Year~State, mean)
Graph12a <- cast(Graph12, Year~state.name, mean)
View(Graph12)
Graph12a <- cast(Graph12,Year~state.name, mean)
Graph12a <- cast(Graph12,Year~state.name, mean,value=Tickets)
View(Graph12)
Graph12a <- cast(Graph12,Year~state.name,value=Tickets)
colnames(Graph12)
Graph12a <- cast(Graph12,Year~state.name)
Graph12a <- cast(Graph12,Year~state.name,mean)
test<- cast(Graph12,Year~state.name,mean)
Graph12<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3,4,7)]
test<- cast(Graph12,Year~state.name,mean)
write.csv(ticketsByState,"parkingTicketsSummary.csv",row.names=FALSE)
ticketsByState<-read.csv("parkingTicketsSummary.csv")
str(ticketsByState)
Graph12<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3,4,7)]
Graph12$state.name<-as.character(Graph12$state.name)
colnames(Graph12)
str(Graph12)
test<- cast(Graph12,Year~state.name,mean)
test<- cast(Graph12,Year~state.name,mean)
test<- cast(Graph12,Year~state.name,value=Tickets)
test<- cast(Graph12,Year~state.name,value=Graph12$Tickets)
test<- cast(Graph12,Graph12$Year~Graph12$state.name,value=Graph12$Tickets)
Graph12<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3,4,7)]
Graph12$state.name<-as.character(Graph12$state.name)
test<- cast(Graph12,Graph12$Year~Graph12$state.name,value=Graph12$Tickets)
Graph12
test<-t(Graph12)
test
?t
test<- cast(Graph12,Graph12$Year~Graph12$state.name)
test<- cast(Graph12,Year~state.name)
test<- cast(Graph12,Year~state.name,value=Tickets)
test<- cast(Graph12,Year~state.name,value=Graph12$Tickets)
colnames(Graph12)
test<- cast(Graph12,Year~state.name,value=Tickets)
test<-melt(Graph12,id.vars=c("State","Year"))
test<-melt(Graph12,id.vars=c("state.name","Year"))
View(test)
test2<- cast(test,Year~state.name)
View(test2)
Graph1<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3,4,7)]
Graph1$state.name<-as.character(Graph1$state.name)
Graph1<-melt(Graph12,id.vars=c("state.name","Year"))
Graph1<- cast(test,Year~state.name)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")
View(Graph2)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3:5,6:7)]
View(Graph2)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3:4,6:7)]
Graph2$ticketPerCar<-Graph2$Tickets/Graph2$Vehicles
View(Graph2)
View(Graph2)
Graph2<-Graph2[c(1,4:5)]
Graph2<-melt(Graph2,id.vars=c("state.name","Year"))
Graph2<-cast(Graph1,Year~state.name)
Graph2<-cast(Graph2,Year~state.name)
View(Graph2)
colnames(Graph1)[2]<-"DC"
colnames(Graph1)[2]<-"DC"
colnames(Graph2)[2]<-"DC"
View(Graph1)
View(Graph2)
Graph2$ticketPerCar<-round(Graph2$Tickets/Graph2$Vehicles,2)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3:4,6:7)]
Graph2$ticketPerCar<-round(Graph2$Tickets/Graph2$Vehicles,2)
View(Graph2)
Graph2<-Graph2[c(1,4:5)]
Graph2<-melt(Graph2,id.vars=c("state.name","Year"))
Graph2<-cast(Graph2,Year~state.name)
colnames(Graph2)[2]<-"DC"
write.csv(Graph1,"Graph1.csv",row.names=FALSE)
write.csv(Graph2,"Graph2.csv",row.names=FALSE)
VApop<-read.csv("VA County Populations.csv",
stringsAsFactors=FALSE, strip.white=TRUE,header=FALSE)
MDpop<-read.csv("MD County Populations.csv",
stringsAsFactors=FALSE, strip.white=TRUE,header=FALSE)
DCpop<-read.csv("DC Population.csv",
stringsAsFactors=FALSE, strip.white=TRUE,header=FALSE)
View(DCpop)
View(VApop)
View(VApop)
View(VApop)
VApop<-subset(VApop,VApop$V3=="Arlington County, Virginia" | VApop$V3=="Fairfax County, Virginia" |
VApop$V3=="Alexandria city, Virginia"| VApop$V3=="Fairfax city, Virginia"|
VApop$V3=="Falls Church city, Virginia")
View(VApop)
VApop$V3=="Falls Church city, Virginia")[c(3,9:11)]
VApop<-subset(VApop,VApop$V3=="Arlington County, Virginia" | VApop$V3=="Fairfax County, Virginia" |
VApop$V3=="Alexandria city, Virginia"| VApop$V3=="Fairfax city, Virginia"|
VApop$V3=="Falls Church city, Virginia")[c(3,9:11)]
VApop<-read.csv("VA County Populations.csv",
stringsAsFactors=FALSE, strip.white=TRUE,header=FALSE)
VApop<-subset(VApop,VApop$V3=="Arlington County, Virginia" | VApop$V3=="Fairfax County, Virginia" |
VApop$V3=="Alexandria city, Virginia"| VApop$V3=="Fairfax city, Virginia"|
VApop$V3=="Falls Church city, Virginia")[c(3,9:11)]
View(VApop)
VAtotal<-colSums(VApop)
VAtotal<-colSums(VApop)[c(2:4)]
str(VApop)
VApop[,2:4] <- as.numeric(VApop[,2:4])
View(VApop)
cols = c(2,3,4);
VApop[,cols] = apply(VApop[,cols], 2, function(x) as.numeric(x));
VAtotal<-colSums(VApop)[c(2:4)]
str(VApop)
VAtotal<-colSums(VApop)[c(2:4)]
VApop<-read.csv("VA County Populations.csv",
stringsAsFactors=FALSE, strip.white=TRUE,header=FALSE)
VApop<-subset(VApop,VApop$V3=="Arlington County, Virginia" | VApop$V3=="Fairfax County, Virginia" |
VApop$V3=="Alexandria city, Virginia"| VApop$V3=="Fairfax city, Virginia"|
VApop$V3=="Falls Church city, Virginia")[c(9:11)]
cols = c(1:3);
VApop[,cols] = apply(VApop[,cols], 2, function(x) as.numeric(x));
VAtotal<-colSums(VApop)[c(2:4)]
View(MDpop)
MDpop<-subset(MDpop,MDpop$V3=="Montgomery County, Maryland" | MDpop$V3=="Prince George's County, Maryland")[c(9:11)]
cols = c(1:3);
MDpop[,cols] = apply(MDpop[,cols], 2, function(x) as.numeric(x));
MDtotal<-colSums(MDpop)[c(2:4)]
View(DCpop)
DCpop<-read.csv("DC Population.csv",
stringsAsFactors=FALSE, strip.white=TRUE,header=FALSE)[3,c(9:11)]
View(DCpop)
areaPop<-rbind(MDtotal,VAtotal)
areaPop<-rbind(MDtotal,VAtotal,DCpop)
View(areaPop)
MDtotal
MDpop<-read.csv("MD County Populations.csv",
stringsAsFactors=FALSE, strip.white=TRUE,header=FALSE)
View(MDpop)
MDpop<-subset(MDpop,MDpop$V3=="Montgomery County, Maryland" | MDpop$V3=="Prince George's County, Maryland")[c(9:11)]
MDpop[,cols] = apply(MDpop[,cols], 2, function(x) as.numeric(x));
View(MDpop)
MDtotal<-colSums(MDpop)
MDtotal
areaPop<-as.data.frame(rbind(MDtotal,VAtotal,DCpop))
View(areaPop)
View(ticketsByState)
colnames(areaPop)<-c("pop2013","pop2014","pop2015")
View(ticketsByState)
View(areaPop)
VAtotal<-colSums(VApop)
areaPop<-as.data.frame(rbind(MDtotal,VAtotal,DCpop))
colnames(areaPop)<-c("pop2013","pop2014","pop2015")
View(areaPop)
areaPop$State<-c("MD","VA","DC")
View(areaPop)
View(areaPop)
areaT<-t(areaPop)
View(areaT)
areaT<-melt(areaPop, id=c("State))
)
areaT<-melt(areaPop, id=c("State))
areaT<-melt(areaPop, id=c("State))
areaT<-melt(areaPop, id=c("State"))
areaT<-melt(areaPop, id=c("State"))
View(areaT)
View(ticketsByState)
View(areaT)
colnames(areaT)<-c("State","Year","Pop")
areaT$Year<-gsub("pop","",areaT$year)
areaT$Year<-gsub("pop","",areaT$Year)
View(areaT)
ticketsByState<-read.csv("parkingTicketsSummary.csv")
View(ticketsByState)
View(Graph2)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(3:4,6:7)]
View(Graph2)
View(Graph2)
View(ticketsByState)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(1,3:4,7)]
View(Graph2)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(2,3:4,7)]
View(Graph2)
Graph2Pop<-merge(Graph2,areaT,by=c("State","Year"))
View(Graph2Pop)
Graph2$ticketPerCapita<-round(Graph2$Tickets/Graph2$Pop,2)
Graph2$ticketPerCapita<-round(Graph2Pop$Tickets/Graph2Pop$Pop,2)
View(areaT)
View(Graph2Pop)
Graph2$ticketPerCapita<-Graph2Pop$Tickets/Graph2Pop$Pop
str(Graph2)
str(Graph2Pop)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(2,3:4,7)]
Graph2Pop<-merge(Graph2,areaT,by=c("State","Year"))
Graph2$ticketPerCapita<-round(Graph2Pop$Tickets/(as.numeric(as.character(Graph2Pop$Pop))),2)
View(Graph2)
Graph2<-subset(ticketsByState,ticketsByState$State=="DC" | ticketsByState$State=="VA" | ticketsByState$State=="MD")[c(2,3:4,7)]
Graph2Pop<-merge(Graph2,areaT,by=c("State","Year"))
Graph2Pop$ticketPerCapita<-round(Graph2Pop$Tickets/(as.numeric(as.character(Graph2Pop$Pop))),2)
View(Graph2Pop)
Graph2<-Graph2[c(2,4,6)]
Graph2Pop<-Graph2Pop[c(2,4,6)]
View(Graph2Pop)
Graph2<-melt(Graph2Pop,id.vars=c("state.name","Year"))
Graph2<-cast(Graph2,Year~state.name)
View(Graph2)
colnames(Graph2)[2]<-"DC"
write.csv(Graph2,"Graph2.csv",row.names=FALSE)
map<-aggregate(list(Tickets=ticketsByState$Tickets,Fines=ticketsByState$Fines),
by=list(State=ticketsByState$state.name), FUN=mean)
View(map)
map$Tickets<-round(map$Tickets,0)
View(map)
map$Fines<-round(map$Fines,2)
stateMap<-readOGR("http://eric.clst.org/wupl/Stuff/gz_2010_us_040_00_5m.json", "OGRGeoJSON")
View(map)
colnames(map)[c(1)]<-"NAME"
StatePTMap<-merge(stateMap,map,by="NAME",all.y=TRUE)
writeOGR(StatePTMap,'StatePTMap.geojson','statePTMap', driver='GeoJSON',check_exists = FALSE)
writeOGR(StatePTMap,'StatePTMap.geojson','statePTMap', driver='GeoJSON',check_exists = FALSE)
